const {IncomingMessage, ServerResponse} = module.exports = require('http')
const {decode} = require('querystring')
const {parse, stringify} = JSON
const {assign, defineProperties, fromEntries, setPrototypeOf} = Object

defineProperties(IncomingMessage.prototype, {
  cookie: {get() {
    const {parsedCookie, headers: {cookie}} = this
    return parsedCookie || (this.parsedCookie = cookie &&
      fromEntries(cookie.split('; ').map(pair => pair.split('='))) || {})
  }},
  rawBody: {async get() {
    if (this.receivedData) return this.receivedData
    const parts = []
    return this.receivedData = new Promise((resolve, reject) => this
      .on('error', reject) .on('data', part => parts.push(part))
      .on('end', () => resolve(Buffer.concat(parts).toString('utf8'))))
  }},
  body: {async get() {
    if (this.parsedBody) return this.parsedBody
    try { this.parsedBody = parse(await this.rawBody) } catch {}
    return this.parsedBody || (this.parsedBody = this.rawBody)
  }},
  path: {get() {
    if (this.urlPath) return this.urlPath
    const [urlPath, urlQuery=''] = this.url.split('?')
    assign(this, {urlPath, urlQuery})
    return urlPath
  }},
  querystring: {get() {
    if (this.urlQuery !== undefined) return this.urlQuery
    const [urlPath, urlQuery=''] = this.url.split('?')
    assign(this, {urlPath, urlQuery})
    return urlQuery
  }},
  query: {get() {
    if (this.parsedQuery) return this.parsedQuery
    return this.parsedQuery =
      setPrototypeOf(decode(this.querystring), Object.prototype)
  }},
})
